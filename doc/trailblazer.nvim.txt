*trailblazer.nvim.txt*  TrailBlazer enables you to seemlessly move through important 
		      project marks as quickly and efficiently as possible to make
		      your workflow *blazingly fast â„¢*.

                                                                       *helpers*
==============================================================================
                                                           *trailblazer.helpers*

 This module is responsible for providing helper functions.

Helpers.get_buf_nr({input?})                                *Helpers.get_buf_nr*
     Returns the buffer number of the supplied value. If the value is a number, it is assumed to be
     a buffer number. If the value is a string, it is assumed to be a buffer name.

    Parameters: ~
        {input?}  (string|number)  @return number?


                                                           *Helpers.tbl_flatmap*
Helpers.tbl_flatmap({lambda}, {tbl}, {flatten_by_key?})
     Returns a mapped and flattended table using the supplied predicate.

    Parameters: ~
        {lambda}           (function)
        {tbl}              (table)
        {flatten_by_key?}  (boolean)

    Returns: ~
        (table)


Helpers.tbl_find({lambda}, {tbl})                             *Helpers.tbl_find*
     Returns the first item in the supplied table that matches the supplied predicate.

    Parameters: ~
        {lambda}  (function)
        {tbl}     (table)     @return any?


Helpers.tbl_indexof({lambda}, {tbl})                       *Helpers.tbl_indexof*
     Returns the index of the first item in the supplied table that matches the supplied predicate.

    Parameters: ~
        {lambda}  (function)
        {tbl}     (table)     @return integer?


Helpers.tbl_append({tbl_dst}, {tbl_src})                    *Helpers.tbl_append*
     Append the supplied src table to the given dst table.

    Parameters: ~
        {tbl_dst}  (table)
        {tbl_src}  (table)


                                                           *Helpers.tbl_prepend*
Helpers.tbl_prepend({tbl_dst}, {tbl_src})
     Prepend the supplied src table to the given dst table.

    Parameters: ~
        {tbl_dst}  (table)
        {tbl_src}  (table)


Helpers.tbl_reverse({tbl})                                 *Helpers.tbl_reverse*
     Returns a table containing the supplied table's values in reverse order.

    Parameters: ~
        {tbl}  (table)

    Returns: ~
        (table)


Helpers.tbl_count({lambda}, {tbl})                           *Helpers.tbl_count*
     Returns the number of items that match the supplied predicate.

    Parameters: ~
        {lambda}  (function)
        {tbl}     (table)

    Returns: ~
        (integer)


Helpers.dedupe({tbl}, {action?})                                *Helpers.dedupe*

    Parameters: ~
        {tbl}      (table)
        {action?}  (function)

    Returns: ~
        (table)


Helpers.sub({s}, {i}, {j})                                         *Helpers.sub*
     Returns the substring of s that starts at `i` and continues until `j` taking unicode and utf-8
     double length chars into account.

    Parameters: ~
        {s}  (string)
        {i}  (number)
        {j}  (number)

    Returns: ~
        (string)


                                              *Helpers.buf_get_utf8_char_at_pos*
Helpers.buf_get_utf8_char_at_pos({buf}, {pos})
     Returns the character at the provided position. This function will return the correct value as
     long as the character has a maximum width of 4 bytes as per the utf-8 standard.

    Parameters: ~
        {buf}  (number)
        {pos}  (table<number,number>)

    Returns: ~
        (string)


                                            *Helpers.buf_get_absolute_file_path*
Helpers.buf_get_absolute_file_path({buf})
     Returns the absolute file path for the supplied buffer.

    Parameters: ~
        {buf}  (number)

    Returns: ~
        (string)


                                            *Helpers.buf_get_relative_file_path*
Helpers.buf_get_relative_file_path({buf})
     Returns the relative workspace file path for the supplied buffer.

    Parameters: ~
        {buf}  (any)

    Returns: ~
        (string)


                                                                    *highlights*
==============================================================================
                                                        *trailblazer.highlights*

 This module is responsible for generating and setting highlight groups used by TrailBlazer.

>
 ## Usage example
 local hl_groups = {
   trail_mark = {
     name = 'TrailBlazerTrailMark',
     def = {
       guifg = "Black",
       guibg = "Red",
       gui = "bold",
     }
   },
   trail_mark_2 = {
     name = 'TrailBlazerTrailMark2',
     def = {
       link = 'TrailBlazerTrailMark',
     }
   }, ...
 }
 require("trailblazer.highlights").register(hl_groups)
<

                                                           *Highlights.register*
Highlights.register({user_table}, {generate_inverted?})
     Generate and register highlight groups. Returns the list of registered groups.

    Parameters: ~
        {user_table}          (table<string,table<string,string>>)
        {generate_inverted?}  (boolean)                             @return table<string>


Highlights.register_hl_groups()                  *Highlights.register_hl_groups*


                                                             *Highlights.invert*
Highlights.invert({hl_table}, {remove_bg?})
     Generate FG/BG inverted highlight groups.

    Parameters: ~
        {hl_table}    (table)
        {remove_bg?}  (boolean)

    Returns: ~
        (table)


                                             *Highlights.generate_group_strings*
Highlights.generate_group_strings({hl_table})
     Generate a list of highlight group strings from a config table.

    Parameters: ~
        {hl_table}  (table<string,table<string,string>>)  @return table<string>


Highlights.def_to_string({name}, {def})               *Highlights.def_to_string*
     Stringify a single highlight definition.

    Parameters: ~
        {name}  (string)
        {def}   (table<string,string>)

    Returns: ~
        (string)


                                                                          *init*
==============================================================================
                                                              *trailblazer.init*

 This is the init module of TrailBlazer. It contains all API functions and is the entry point for
 the plugin.

TrailBlazer.setup({options?})                                *TrailBlazer.setup*
     Setup TrailBlazer.

    Parameters: ~
        {options?}  (table)


                                                    *TrailBlazer.new_trail_mark*
TrailBlazer.new_trail_mark({win?}, {buf?}, {pos?})
     Create a new trail mark at the current cursor or defined position and buffer.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number|string)
        {pos?}  (table<number,number>)


TrailBlazer.track_back({buf?})                          *TrailBlazer.track_back*
     Track back to the last trail mark.

    Parameters: ~
        {buf?}  (number|string)


                                             *TrailBlazer.peek_move_previous_up*
TrailBlazer.peek_move_previous_up({buf?})
     Peek move to the previous trail mark if sorted chronologically or up if sorted by line.

    Parameters: ~
        {buf?}  (number|string)


TrailBlazer.peek_move_next_down({buf?})        *TrailBlazer.peek_move_next_down*
     Peek move to the next trail mark if sorted chronologically or down if sorted by line.

    Parameters: ~
        {buf?}  (number|string)


                                            *TrailBlazer.delete_all_trail_marks*
TrailBlazer.delete_all_trail_marks({buf?})
     Delete all trail marks from all or a specific buffer.

    Parameters: ~
        {buf?}  (number|string)


                                          *TrailBlazer.paste_at_last_trail_mark*
TrailBlazer.paste_at_last_trail_mark({buf?})
     Paste the selected register contents at the last trail mark of all or a specific buffer.

    Parameters: ~
        {buf?}  (number|string)


                                          *TrailBlazer.paste_at_all_trail_marks*
TrailBlazer.paste_at_all_trail_marks({buf?})
     Paste the selected register contents at all trail marks of all or a specific buffer.

    Parameters: ~
        {buf?}  (number|string)


                                        *TrailBlazer.set_trail_mark_select_mode*
TrailBlazer.set_trail_mark_select_mode({mode})
     Set the trail mark selection mode to the given mode or toggle between the available modes.

    Parameters: ~
        {mode}  (any)


                                            *TrailBlazer.toggle_trail_mark_list*
TrailBlazer.toggle_trail_mark_list({type}, {buf?})
     Toggle a list of all trail marks for the specified buffer in the specified list type.

    Parameters: ~
        {type}  (any)
        {buf?}  (any)


TrailBlazer.is_configured()                          *TrailBlazer.is_configured*
     Check if TrailBlazer is configured.

    Returns: ~
        (boolean)


                                                                       *keymaps*
==============================================================================
                                                           *trailblazer.keymaps*

 This module is responsible for setting up keymaps.

                                                     *Keymaps.register_api_maps*
Keymaps.register_api_maps({key_maps}, {tb_api?})
     Check if callback function exists in the TrailBlazer API and register all mappings in the
     supplied keymap table.

    Parameters: ~
        {key_maps}  (table)
        {tb_api?}   (table)


                                                      *Keymaps.register_for_buf*
Keymaps.register_for_buf({key_maps}, {mod_name}, {mod?}, {buf?}, {warn_callback?})
     Check if callback function exists in the specified module and register all mappings in the
     supplied keymap table.

    Parameters: ~
        {key_maps}        (table)
        {mod_name}        (string)
        {mod?}            (table)
        {buf?}            (number)
        {warn_callback?}  (function)


                                                                           *log*
==============================================================================
                                                               *trailblazer.log*

 This module is responsible for logging messages in a consistent way with support for multiple
 languages.

Log.setup({lang})                                                    *Log.setup*
     Set the current language if the specified language is supported.

    Parameters: ~
        {lang}  (string)


Log.info({name}, {additional_info?})                                  *Log.info*
     Log an info message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


Log.warn({name}, {additional_info?})                                  *Log.warn*
     Log a warning message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


Log.error({name}, {additional_info?})                                *Log.error*
     Log an error message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


                                                                *trails.actions*
==============================================================================
                                                    *trailblazer.trails.actions*

 This module is responsible for managing TrailBlazer trail actions.

                                                        *Actions.new_trail_mark*
Actions.new_trail_mark({win?}, {buf?}, {pos?})
     Add a new trail mark to the stack.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number)
        {pos?}  (table<number,number>)  @return table?


Actions.track_back({buf?})                                  *Actions.track_back*
     Remove the last global or buffer local trail mark from the stack.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Actions.paste_at_last_trail_mark({buf?})      *Actions.paste_at_last_trail_mark*
     Paste the selected register contents at the last trail mark of all or a specific buffer.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Actions.paste_at_all_trail_marks({buf?})      *Actions.paste_at_all_trail_marks*
     Paste the selected register contents at all trail marks of all or a specific buffer.

    Parameters: ~
        {buf?}  (number)


Actions.delete_all_trail_marks({buf?})          *Actions.delete_all_trail_marks*
     Delete all trail marks from the stack and all or a specific buffer.

    Parameters: ~
        {buf?}  (number)


                                            *Actions.set_trail_mark_select_mode*
Actions.set_trail_mark_select_mode({mode?})
     Set the trail mark selection mode to the given mode or toggle between the available modes.

    Parameters: ~
        {mode?}  (string)


                                                                 *trails.common*
==============================================================================
                                                     *trailblazer.trails.common*

 This module is responsible for managing trails common functionality and runtime state.

                                                    *Common.paste_at_trail_mark*
Common.paste_at_trail_mark({buf?}, {trail_mark_index?})
     Paste the selected register contents at a specifi trail mark.

    Parameters: ~
        {buf?}               (number)
        {trail_mark_index?}  (number)

    Returns: ~
        (boolean)


                                            *Common.set_cursor_to_previous_mark*
Common.set_cursor_to_previous_mark({buf?}, {current_mark_index?})
     Set the cursor to the previous trail mark.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)


                                                *Common.set_cursor_to_next_mark*
Common.set_cursor_to_next_mark({buf?}, {current_mark_index?})
     Set the cursor to the next trail mark.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)


Common.sort_trail_mark_stack({mode?})             *Common.sort_trail_mark_stack*
     Sort the trail mark stack according to the current or provided trail mark mode.

    Parameters: ~
        {mode?}  (string)


                                                      *Common.focus_win_and_buf*
Common.focus_win_and_buf({trail_mark}, {ext_mark})
     Focus a specific window and buffer and set the cursor to the position of the trail mark.

    Parameters: ~
        {trail_mark}  (table)
        {ext_mark}    (table)

    Returns: ~
        (boolean)


                                  *Common.focus_win_and_buf_by_trail_mark_index*
Common.focus_win_and_buf_by_trail_mark_index({buf?}, {trail_mark_index?}, {remove_trail_mark})
     Focus a specific window and buffer and set the cursor to the position of the trail mark by
     providing its index.

    Parameters: ~
        {buf?}               (number)
        {trail_mark_index?}  (number)
        {remove_trail_mark}  (boolean)

    Returns: ~
        (boolean)


                                            *Common.get_trail_mark_under_cursor*
Common.get_trail_mark_under_cursor({win?}, {buf?}, {pos?})
     Return the trail mark and its index in the trail mark stack under the current cursor location.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number)
        {pos?}  (table<number,number>)  @return number?
                                        @return table?


                                         *Common.get_marks_for_trail_mark_index*
Common.get_marks_for_trail_mark_index({buf?}, {newest_mark_index?})
     Return the trail mark at the given position as well as the corresponding extmark.

    Parameters: ~
        {buf?}                (number)
        {newest_mark_index?}  (number)  @return number?
                                        @return table?
                                        @return table?


                               *Common.get_newest_and_oldest_mark_index_for_buf*
Common.get_newest_and_oldest_mark_index_for_buf({buf?})
     Find the newest and oldest trail mark in the stack that belongs to the given buffer.

    Parameters: ~
        {buf?}  (number)  @return number?
                          @return number?


                                          *Common.get_relative_marks_and_cursor*
Common.get_relative_marks_and_cursor({buf?}, {current_mark_index?})
     Get a mark selection depending on the current mark selection mode and the corresponding
     relative current cursor position within it.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)

    Returns: ~
        (table)
        (number)


                                             *Common.get_first_trail_mark_index*
Common.get_first_trail_mark_index({win?}, {buf?}, {pos?})
     Get the index of the first trail mark that matches the given window, buffer and position.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number)
        {pos?}  (table<number,number>)  @return integer?


                        *Common.get_hl_group_for_current_trail_mark_select_mode*
Common.get_hl_group_for_current_trail_mark_select_mode({mode?})
     Returns the corresponding highlight group for the provided or global trail mark selection mode.

    Parameters: ~
        {mode?}  (string)

    Returns: ~
        (string)


                 *Common.translate_actual_cursor_from_relative_marks_and_cursor*
Common.translate_actual_cursor_from_relative_marks_and_cursor({buf?}, {marks}, {cursor})
     Translate a relative cursor position within the provided marks selection to the absolute
     cursor position within the trail mark stack.

    Parameters: ~
        {buf?}    (number)
        {marks}   (table)
        {cursor}  (number)


                               *Common.default_buf_for_current_mark_select_mode*
Common.default_buf_for_current_mark_select_mode({buf?})
     Return the default buffer for the currently selected trail mark selection mode or the given
     buffer if it is not nil.

    Parameters: ~
        {buf?}  (number)  @return number?


                                       *Common.remove_duplicate_pos_trail_marks*
Common.remove_duplicate_pos_trail_marks()
     Remove duplicate trail marks from the stack.


Common.update_all_trail_mark_positions()*Common.update_all_trail_mark_positions*
     Update the positions of all trail marks in the stack by loading all extmarks for each loaded
     buffer and updating the trail mark stack.


Common.reregister_trail_marks()                  *Common.reregister_trail_marks*
     Reregister all trail marks on the stack. This function can also be used to restore trail marks
     after calling `vim.lsp.formatting` which currently causes extmarks to be moved out of the
     buffer range.


                                    *Common.get_trail_mark_stack_subset_for_buf*
Common.get_trail_mark_stack_subset_for_buf({buf?})
     Returns a subset of the trail mark stack for a given buffer or the whole stack if no buffer is
     given.

    Parameters: ~
        {buf?}  (number)  @return table?


                                                                 *trails.config*
==============================================================================
                                                     *trailblazer.trails.config*

 This module is responsible for managing the configuration of TrailBlazer trails.

Config.setup({options?})                                          *Config.setup*
     Setup the TrailBlazer config module.

    Parameters: ~
        {options?}  (table)


                                                                   *trails.init*
==============================================================================
                                                            *trailblazer.trails*

 This module is responsible setting up the trails module.

Trails.setup({options?})                                          *Trails.setup*
     Setup the TrailBlazer trails module.

    Parameters: ~
        {options?}  (table)


                                                                   *trails.list*
==============================================================================
                                                       *trailblazer.trails.list*

 This module is responsible for handling TrailBlazer trail list view.

                                                   *List.toggle_trail_mark_list*
List.toggle_trail_mark_list({type?}, {buf?})
     Toggle a list of all trail marks for the specified buffer in the specified list type.

    Parameters: ~
        {type?}  (string)
        {buf?}   (number)


                                                   *List.update_trail_mark_list*
List.update_trail_mark_list({type?}, {buf?})
     Update the specified list type with the trail marks for the specified buffer.

    Parameters: ~
        {type?}  (string)
        {buf?}   (number)


                                                    *List.toggle_quick_fix_list*
List.toggle_quick_fix_list({buf?}, {trail_mark_list?})
     Toggle a quick fix list with specified trail mark list.

    Parameters: ~
        {buf?}              (number)
        {trail_mark_list?}  (table)


                                  *List.populate_quickfix_list_with_trail_marks*
List.populate_quickfix_list_with_trail_marks({buf?}, {trail_mark_list?})
     Populate the quick fix list with the specified trail mark list.

    Parameters: ~
        {buf?}              (number)
        {trail_mark_list?}  (table)


                                            *List.register_quickfix_keybindings*
List.register_quickfix_keybindings({mapping_table})
     Register quickfix list keybindings.

    Parameters: ~
        {mapping_table}  (table)


                                   *List.qf_action_move_trail_mark_stack_cursor*
List.qf_action_move_trail_mark_stack_cursor()
     Move the trail mark stack cursor on selecting a trail mark from the quickfix list.


List.get_quickfix_buf()                                  *List.get_quickfix_buf*
     Check if a TrailBlazer quick fix list is currently visible and return its buffer number.
    @return number?


                                                                *trails.motions*
==============================================================================
                                                    *trailblazer.trails.motions*

 This module is responsible for managing TrailBlazer trail motions.

Motions.peek_move_previous_up({buf?})            *Motions.peek_move_previous_up*
     Peek move to the previous trail mark if sorted chronologically or up if sorted by line.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Motions.peek_move_next_down({buf?})                *Motions.peek_move_next_down*
     Peek move to the next trail mark if sorted chronologically or down if sorted by line.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


vim:tw=78:ts=8:noet:ft=help:norl:
