*trailblazer.nvim.txt*  TrailBlazer enables you to seemlessly move through important 
		      project marks as quickly and efficiently as possible to make
		      your workflow *blazingly fast â„¢*.

                                                                       *helpers*
==============================================================================
                                                           *trailblazer.helpers*

 This module is responsible for providing helper functions.

Helpers.get_buf_nr({input?})                                *Helpers.get_buf_nr*
     Returns the buffer number of the supplied value. If the value is a number, it is assumed to be
     a buffer number. If the value is a string, it is assumed to be a buffer name.

    Parameters: ~
        {input?}  (string|number)  @return number?


                                                           *Helpers.tbl_flatmap*
Helpers.tbl_flatmap({lambda}, {tbl}, {flatten_by_key?})
     Returns a mapped and flattended table using the supplied predicate.

    Parameters: ~
        {lambda}           (function)
        {tbl}              (table)
        {flatten_by_key?}  (boolean)

    Returns: ~
        (table)


Helpers.tbl_find({lambda}, {tbl})                             *Helpers.tbl_find*
     Returns the first item in the supplied table that matches the supplied predicate.

    Parameters: ~
        {lambda}  (function)
        {tbl}     (table)     @return any?


Helpers.tbl_indexof({lambda}, {tbl})                       *Helpers.tbl_indexof*
     Returns the index of the first item in the supplied table that matches the supplied predicate.

    Parameters: ~
        {lambda}  (function)
        {tbl}     (table)     @return integer?


Helpers.dedupe({tbl}, {action?})                                *Helpers.dedupe*

    Parameters: ~
        {tbl}      (table)
        {action?}  (function)

    Returns: ~
        (table)


                                                                    *highlights*
==============================================================================
                                                        *trailblazer.highlights*

 This module is responsible for generating and setting highlight groups used by TrailBlazer.

>
 ## Usage example
 local hl_groups = {
   trail_mark = {
     name = 'TrailBlazerTrailMark',
     def = {
       guifg = "Black",
       guibg = "Red",
       gui = "bold",
     }
   },
   trail_mark_2 = {
     name = 'TrailBlazerTrailMark2',
     def = {
       link = 'TrailBlazerTrailMark',
     }
   }, ...
 }
 require("trailblazer.highlights").register(hl_groups)
<

Highlights.register({user_table})                          *Highlights.register*
     Generate and register highlight groups. Returns the list of registered groups.

    Parameters: ~
        {user_table}  (table<string,table<string,string>>)  @return table<string>


Highlights.register_hl_groups()                  *Highlights.register_hl_groups*


                                             *Highlights.generate_group_strings*
Highlights.generate_group_strings({hl_table})
     Generate a list of highlight group strings from a config table.

    Parameters: ~
        {hl_table}  (table<string,table<string,string>>)  @return table<string>


Highlights.def_to_string({name}, {def})               *Highlights.def_to_string*
     Stringify a single highlight definition.

    Parameters: ~
        {name}  (string)
        {def}   (table<string,string>)

    Returns: ~
        (string)


                                                                       *keymaps*
==============================================================================
                                                           *trailblazer.keymaps*

 This module is responsible for setting up keymaps.

Keymaps.register({key_maps}, {tb_api?})                       *Keymaps.register*
     Check if callback function exists in the TrailBlazer API and register all mappings in the
     supplied keymap table.

    Parameters: ~
        {key_maps}  (table)
        {tb_api?}   (table)


                                                                           *log*
==============================================================================
                                                               *trailblazer.log*

 This module is responsible for logging messages in a consistent way with support for multiple
 languages.

Log.setup({lang})                                                    *Log.setup*
     Set the current language if the specified language is supported.

    Parameters: ~
        {lang}  (string)


Log.info({name}, {additional_info?})                                  *Log.info*
     Log an info message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


Log.warn({name}, {additional_info?})                                  *Log.warn*
     Log a warning message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


Log.error({name}, {additional_info?})                                *Log.error*
     Log an error message.

    Parameters: ~
        {name}              (string)
        {additional_info?}  (string)


                                                                          *init*
==============================================================================
                                                            *trailblazer.trails*

 This module is responsible for managing trails.

Trails.setup({options?})                                          *Trails.setup*
     Setup the TrailBlazer trails module.

    Parameters: ~
        {options?}  (table)


                                                         *Trails.new_trail_mark*
Trails.new_trail_mark({win?}, {buf?}, {pos?})
     Add a new trail mark to the stack.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number)
        {pos?}  (table<number,number>)  @return table?


Trails.track_back({buf?})                                    *Trails.track_back*
     Remove the last global or buffer local trail mark from the stack.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Trails.peek_move_next_up({buf?})                      *Trails.peek_move_next_up*
     Peek move to the next trail mark if sorted chronologically or up if sorted by line.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Trails.peek_move_previous_down({buf?})          *Trails.peek_move_previous_down*
     Peek move to the previous trail mark if sorted chronologically or down if sorted by line.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Trails.paste_at_last_trail_mark({buf?})        *Trails.paste_at_last_trail_mark*
     Paste the selected register contents at the last trail mark of all or a specific buffer.

    Parameters: ~
        {buf?}  (number)

    Returns: ~
        (boolean)


Trails.paste_at_all_trail_marks({buf?})        *Trails.paste_at_all_trail_marks*
     Paste the selected register contents at all trail marks of all or a specific buffer.

    Parameters: ~
        {buf?}  (number)


                                                    *Trails.paste_at_trail_mark*
Trails.paste_at_trail_mark({buf?}, {trail_mark_index?})
     Paste the selected register contents at a specifi trail mark.

    Parameters: ~
        {buf?}               (number)
        {trail_mark_index?}  (number)

    Returns: ~
        (boolean)


Trails.delete_all_trail_marks({buf?})            *Trails.delete_all_trail_marks*
     Delete all trail marks from the stack and all or a specific buffer.

    Parameters: ~
        {buf?}  (number)


                                             *Trails.set_trail_mark_select_mode*
Trails.set_trail_mark_select_mode({mode?})
     Set the trail mark selection mode to the given mode or toggle between the available modes.

    Parameters: ~
        {mode?}  (string)


                                                *Trails.set_cursor_to_next_mark*
Trails.set_cursor_to_next_mark({buf?}, {current_mark_index?})
     Set the cursor to the next trail mark.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)


                                            *Trails.set_cursor_to_previous_mark*
Trails.set_cursor_to_previous_mark({buf?}, {current_mark_index?})
     Set the cursor to the previous trail mark.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)


Trails.sort_trail_mark_stack({mode?})             *Trails.sort_trail_mark_stack*
     Sort the trail mark stack according to the current or provided trail mark mode.

    Parameters: ~
        {mode?}  (string)


                                                      *Trails.focus_win_and_buf*
Trails.focus_win_and_buf({trail_mark}, {ext_mark})
     Focus a specific window and buffer and set the cursor to the position of the trail mark.

    Parameters: ~
        {trail_mark}  (table)
        {ext_mark}    (table)

    Returns: ~
        (boolean)


                                  *Trails.focus_win_and_buf_by_trail_mark_index*
Trails.focus_win_and_buf_by_trail_mark_index({buf?}, {trail_mark_index?}, {remove_trail_mark})
     Focus a specific window and buffer and set the cursor to the position of the trail mark by
     providing its index.

    Parameters: ~
        {buf?}               (number)
        {trail_mark_index?}  (number)
        {remove_trail_mark}  (boolean)

    Returns: ~
        (boolean)


                                            *Trails.get_trail_mark_under_cursor*
Trails.get_trail_mark_under_cursor({win?}, {buf?}, {pos?})
     Return the trail mark and its index in the trail mark stack under the current cursor location.

    Parameters: ~
        {win?}  (number)
        {buf?}  (number)
        {pos?}  (table<number,number>)  @return number?
                                        @return table?


                                         *Trails.get_marks_for_trail_mark_index*
Trails.get_marks_for_trail_mark_index({buf?}, {last_mark_index?})
     Return the trail mark at the given position as well as the corresponding extmark.

    Parameters: ~
        {buf?}              (number)
        {last_mark_index?}  (number)  @return number?
                                      @return table?
                                      @return table?


                                          *Trails.get_newest_mark_index_for_buf*
Trails.get_newest_mark_index_for_buf({buf?})
     Find the newest trail mark in the stack that belongs to the given buffer.

    Parameters: ~
        {buf?}  (number)  @return number?


                                          *Trails.get_relative_marks_and_cursor*
Trails.get_relative_marks_and_cursor({buf?}, {current_mark_index?})
     Get a mark selection depending on the current mark selection mode and the corresponding
     relative current cursor position within it.

    Parameters: ~
        {buf?}                 (number)
        {current_mark_index?}  (number)

    Returns: ~
        (table)
        (number)


                        *Trails.get_hl_group_for_current_trail_mark_select_mode*
Trails.get_hl_group_for_current_trail_mark_select_mode({mode?})
     Returns the corresponding highlight group for the provided or global trail mark selection mode.

    Parameters: ~
        {mode?}  (string)

    Returns: ~
        (string)


                 *Trails.translate_acutal_cursor_from_relative_marks_and_cursor*
Trails.translate_acutal_cursor_from_relative_marks_and_cursor({marks}, {cursor})
     Translate a relative cursor position within the provided marks selection to the absolute
     cursor position within the trail mark stack.

    Parameters: ~
        {marks}   (table)
        {cursor}  (number)


                               *Trails.default_buf_for_current_mark_select_mode*
Trails.default_buf_for_current_mark_select_mode({buf?})
     Return the default buffer for the currently selected trail mark selection mode or the given
     buffer if it is not nil.

    Parameters: ~
        {buf?}  (number)  @return number?


                                       *Trails.remove_duplicate_pos_trail_marks*
Trails.remove_duplicate_pos_trail_marks()
     Remove duplicate trail marks from the stack.


Trails.update_all_trail_mark_positions()*Trails.update_all_trail_mark_positions*
     Update the positions of all trail marks in the stack by loading all extmarks for each loaded
     buffer and updating the trail mark stack.


Trails.reregister_trail_marks()                  *Trails.reregister_trail_marks*
     Reregister all trail marks on the stack. This function can also be used to restore trail marks
     after calling `vim.lsp.formatting` which currently causes extmarks to be moved out of the
     buffer range.


vim:tw=78:ts=8:noet:ft=help:norl:
